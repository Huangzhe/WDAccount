package com.sh.lynn.huang.wdaccount.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sh.lynn.huang.wdaccount.been.Platform;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLATFORM".
*/
public class PlatformDao extends AbstractDao<Platform, Long> {

    public static final String TABLENAME = "PLATFORM";

    /**
     * Properties of entity Platform.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property RechargeTime = new Property(5, java.util.Date.class, "rechargeTime", false, "RECHARGE_TIME");
        public final static Property Balance = new Property(6, String.class, "balance", false, "BALANCE");
        public final static Property Password2 = new Property(7, String.class, "password2", false, "PASSWORD2");
        public final static Property Describe = new Property(8, String.class, "describe", false, "DESCRIBE");
    };

    private DaoSession daoSession;


    public PlatformDao(DaoConfig config) {
        super(config);
    }
    
    public PlatformDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLATFORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ADDRESS\" TEXT," + // 2: address
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"PASSWORD\" TEXT," + // 4: password
                "\"RECHARGE_TIME\" INTEGER," + // 5: rechargeTime
                "\"BALANCE\" TEXT," + // 6: balance
                "\"PASSWORD2\" TEXT," + // 7: password2
                "\"DESCRIBE\" TEXT);"); // 8: describe
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLATFORM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Platform entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        java.util.Date rechargeTime = entity.getRechargeTime();
        if (rechargeTime != null) {
            stmt.bindLong(6, rechargeTime.getTime());
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(7, balance);
        }
 
        String password2 = entity.getPassword2();
        if (password2 != null) {
            stmt.bindString(8, password2);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(9, describe);
        }
    }

    @Override
    protected void attachEntity(Platform entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Platform readEntity(Cursor cursor, int offset) {
        Platform entity = new Platform( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // rechargeTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // balance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // password2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // describe
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Platform entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRechargeTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setBalance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescribe(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Platform entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Platform entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
