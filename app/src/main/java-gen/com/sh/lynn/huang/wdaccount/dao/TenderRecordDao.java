package com.sh.lynn.huang.wdaccount.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh.lynn.huang.wdaccount.been.Platform;

import com.sh.lynn.huang.wdaccount.been.TenderRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TENDER_RECORD".
*/
public class TenderRecordDao extends AbstractDao<TenderRecord, Long> {

    public static final String TABLENAME = "TENDER_RECORD";

    /**
     * Properties of entity TenderRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Money = new Property(1, double.class, "money", false, "MONEY");
        public final static Property TenderTime = new Property(2, java.util.Date.class, "tenderTime", false, "TENDER_TIME");
        public final static Property CalInteresttype = new Property(3, Integer.class, "calInteresttype", false, "CAL_INTERESTTYPE");
        public final static Property During = new Property(4, Integer.class, "during", false, "DURING");
        public final static Property TenderType = new Property(5, String.class, "tenderType", false, "TENDER_TYPE");
        public final static Property TenderState = new Property(6, String.class, "tenderState", false, "TENDER_STATE");
        public final static Property Rate = new Property(7, Double.class, "rate", false, "RATE");
        public final static Property Reword = new Property(8, Double.class, "reword", false, "REWORD");
        public final static Property PlatformId = new Property(9, long.class, "platformId", false, "PLATFORM_ID");
    };

    private DaoSession daoSession;

    private Query<TenderRecord> platform_TenderRecordListQuery;

    public TenderRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TenderRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TENDER_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MONEY\" REAL NOT NULL ," + // 1: money
                "\"TENDER_TIME\" INTEGER," + // 2: tenderTime
                "\"CAL_INTERESTTYPE\" INTEGER," + // 3: calInteresttype
                "\"DURING\" INTEGER," + // 4: during
                "\"TENDER_TYPE\" TEXT," + // 5: tenderType
                "\"TENDER_STATE\" TEXT," + // 6: tenderState
                "\"RATE\" REAL," + // 7: rate
                "\"REWORD\" REAL," + // 8: reword
                "\"PLATFORM_ID\" INTEGER NOT NULL );"); // 9: platformId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TENDER_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TenderRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getMoney());
 
        java.util.Date tenderTime = entity.getTenderTime();
        if (tenderTime != null) {
            stmt.bindLong(3, tenderTime.getTime());
        }
 
        Integer calInteresttype = entity.getCalInteresttype();
        if (calInteresttype != null) {
            stmt.bindLong(4, calInteresttype);
        }
 
        Integer during = entity.getDuring();
        if (during != null) {
            stmt.bindLong(5, during);
        }
 
        String tenderType = entity.getTenderType();
        if (tenderType != null) {
            stmt.bindString(6, tenderType);
        }
 
        String tenderState = entity.getTenderState();
        if (tenderState != null) {
            stmt.bindString(7, tenderState);
        }
 
        Double rate = entity.getRate();
        if (rate != null) {
            stmt.bindDouble(8, rate);
        }
 
        Double reword = entity.getReword();
        if (reword != null) {
            stmt.bindDouble(9, reword);
        }
        stmt.bindLong(10, entity.getPlatformId());
    }

    @Override
    protected void attachEntity(TenderRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TenderRecord readEntity(Cursor cursor, int offset) {
        TenderRecord entity = new TenderRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // money
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // tenderTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // calInteresttype
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // during
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tenderType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tenderState
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // rate
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // reword
            cursor.getLong(offset + 9) // platformId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TenderRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMoney(cursor.getDouble(offset + 1));
        entity.setTenderTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCalInteresttype(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDuring(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTenderType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTenderState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRate(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setReword(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setPlatformId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TenderRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TenderRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tenderRecordList" to-many relationship of Platform. */
    public List<TenderRecord> _queryPlatform_TenderRecordList(long platformId) {
        synchronized (this) {
            if (platform_TenderRecordListQuery == null) {
                QueryBuilder<TenderRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlatformId.eq(null));
                platform_TenderRecordListQuery = queryBuilder.build();
            }
        }
        Query<TenderRecord> query = platform_TenderRecordListQuery.forCurrentThread();
        query.setParameter(0, platformId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlatformDao().getAllColumns());
            builder.append(" FROM TENDER_RECORD T");
            builder.append(" LEFT JOIN PLATFORM T0 ON T.\"PLATFORM_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TenderRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        TenderRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Platform platform = loadCurrentOther(daoSession.getPlatformDao(), cursor, offset);
         if(platform != null) {
            entity.setPlatform(platform);
        }

        return entity;    
    }

    public TenderRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TenderRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TenderRecord> list = new ArrayList<TenderRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TenderRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TenderRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
