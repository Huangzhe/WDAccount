package com.sh.lynn.huang.wdaccount.been;

import java.util.List;
import com.sh.lynn.huang.wdaccount.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.sh.lynn.huang.wdaccount.dao.InvestRecordDao;
import com.sh.lynn.huang.wdaccount.dao.MoneyRecordDao;
import com.sh.lynn.huang.wdaccount.dao.PlatformDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PLATFORM".
 */
public class Platform {

    private Long id;
    /** Not-null value. */
    private String name;
    private String address;
    private String userName;
    private String password;
    private java.util.Date rechargeTime;
    private String balance;
    private String password2;
    private String describe;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlatformDao myDao;

    private List<MoneyRecord> moneyRecordList;
    private List<InvestRecord> investRecordList;

    public Platform() {
    }

    public Platform(Long id) {
        this.id = id;
    }

    public Platform(Long id, String name, String address, String userName, String password, java.util.Date rechargeTime, String balance, String password2, String describe) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.userName = userName;
        this.password = password;
        this.rechargeTime = rechargeTime;
        this.balance = balance;
        this.password2 = password2;
        this.describe = describe;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlatformDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public java.util.Date getRechargeTime() {
        return rechargeTime;
    }

    public void setRechargeTime(java.util.Date rechargeTime) {
        this.rechargeTime = rechargeTime;
    }

    public String getBalance() {
        return balance;
    }

    public void setBalance(String balance) {
        this.balance = balance;
    }

    public String getPassword2() {
        return password2;
    }

    public void setPassword2(String password2) {
        this.password2 = password2;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MoneyRecord> getMoneyRecordList() {
        if (moneyRecordList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoneyRecordDao targetDao = daoSession.getMoneyRecordDao();
            List<MoneyRecord> moneyRecordListNew = targetDao._queryPlatform_MoneyRecordList(id);
            synchronized (this) {
                if(moneyRecordList == null) {
                    moneyRecordList = moneyRecordListNew;
                }
            }
        }
        return moneyRecordList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMoneyRecordList() {
        moneyRecordList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<InvestRecord> getInvestRecordList() {
        if (investRecordList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InvestRecordDao targetDao = daoSession.getInvestRecordDao();
            List<InvestRecord> investRecordListNew = targetDao._queryPlatform_InvestRecordList(id);
            synchronized (this) {
                if(investRecordList == null) {
                    investRecordList = investRecordListNew;
                }
            }
        }
        return investRecordList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInvestRecordList() {
        investRecordList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
